# Generated by Django 5.1.7 on 2025-05-02 23:52

import clinic.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='id')),
                ('contact_phone', models.CharField(max_length=254)),
                ('city', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='accounts.city')),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='id')),
                ('start_hour', models.TimeField(default=0)),
                ('end_hour', models.TimeField(default=0)),
                ('experience_years', models.IntegerField(default=0)),
                ('reviews_count', models.IntegerField(default=0)),
                ('rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('patient_count', models.IntegerField(default=0)),
                ('is_available', models.BooleanField(default=True)),
                ('profile_img', models.ImageField(blank=True, null=True, upload_to=clinic.models.upload_doctor_profile_image)),
                ('is_active', models.BooleanField(default=True)),
                ('city', models.ForeignKey(default='Not Specified', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.city')),
                ('clinic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.clinic')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='id')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='id')),
                ('review', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patient')),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='id')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('date', 'start_time', 'end_time'), name='unique_timeslot')],
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='id')),
                ('status', models.CharField(choices=[('pending', 'pending'), ('confirmed', 'confirmed'), ('cancelled', 'cancelled'), ('completed', 'completed')], default='pending', max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=254, null=True)),
                ('phone', models.CharField(max_length=254, null=True)),
                ('age', models.DecimalField(decimal_places=0, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('city', models.CharField(choices=[('Shebin El-Kom', 'Shebin El-Kom'), ('Menouf', 'Menouf'), ('Tookh Tanbesha', 'Tookh Tanbesha'), ('Quesna', 'Quesna'), ('Berket El-Sabaa', 'Berket El-Sabaa'), ('Ashan', 'Ashan'), ('Shibra Balloula', 'Shibra Balloula'), ('Sadat City', 'Sadat City'), ('Nasr City', 'Nasr City'), ('Heliopolis', 'Heliopolis'), ('Maadi', 'Maadi'), ('Zamalek', 'Zamalek'), ('Downtown', 'Downtown'), ('New Cairo', 'New Cairo'), ('Mokattam', 'Mokattam'), ('Sheraton', 'Sheraton'), ('Garden City', 'Garden City'), ('Abbasia', 'Abbasia'), ('Smouha', 'Smouha'), ('Miami', 'Miami'), ('Roushdy', 'Roushdy'), ('Gleem', 'Gleem'), ('Stanley', 'Stanley'), ('Louran', 'Louran'), ('Al Mansheya', 'Al Mansheya'), ('Bolkly', 'Bolkly'), ('Dokki', 'Dokki'), ('Mohandeseen', 'Mohandeseen'), ('Agouza', 'Agouza'), ('Haram', 'Haram'), ('Faysal', 'Faysal'), ('October', 'October'), ('Sheikh Zayed', 'Sheikh Zayed'), ('Imbaba', 'Imbaba'), ('Not Specified', 'Not Specified')], default='Not Specified', max_length=254)),
                ('desc', models.TextField(blank=True, null=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patient')),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.timeslot')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('doctor', 'time_slot'), name='unique_doctor_timeslot'), models.UniqueConstraint(fields=('patient', 'time_slot'), name='unique_patient_timeslot')],
            },
        ),
    ]
